<j:jelly xmlns:j="jelly:core" xmlns:st="jelly:stapler" xmlns:g="/jelly/cppcheck">
    <st:header name="Content-Type" value="text/html;charset=UTF-8"/>

    <j:set var="cachedContainer" value="${it.diffCurrentAndPrevious(null)}"/>

    <h2>${%Details}</h2>

    <style type="text/css">
    #cppcheckDetails { width: auto; }
    #cppcheckDetails td { white-space: normal; word-break: break-all; }
    #cppcheckDetails .new { background-color: #FFC8C8; }
    #cppcheckDetails .solved { background-color: #C8FFC8; }
    #cppcheckDetails .unchanged { }
    #cppcheckDetails .inconclusive { color: #555555; }
    form { /*border: solid;*/ overflow: hidden; }
    </style>

    <p>Show issues highlighted on a single page</p>
    <ul>
        <li><a href="source.all?before=5&amp;after=5">${%all}</a></li>
        <li><a href="source.all?before=5&amp;after=5&amp;states=new,solved">${%new and solved}</a></li>
        <li><a href="source.all?before=5&amp;after=5&amp;states=new">${%new}</a></li>
        <li><a href="source.all?before=5&amp;after=5&amp;states=solved">${%solved}</a></li>
        <li><a href="source.all?before=5&amp;after=5&amp;states=unchanged">${%unchanged}</a></li>
    </ul>

    <script>
        <![CDATA[
            function arrayContains(array, element) {
                for (var i = 0; i < array.length; i++) {
                    if (array[i] === element) {
                        return true;
                    }
                }
                return false;
            }

            function createMapping() {
                var table = [];
                table['state']        = 0;
                table['file']         = 1;
                table['line']         = 2;
                table['severity']     = 3;
                table['type']         = 4;
                table['inconclusive'] = 5;
                table['message']      = 6;
                return table;
            }

            var mapping = createMapping();

            var availableFilters = [
                'state',
                'severity',
                'type',
                'inconclusive'
            ];

            function getAll(name) {
                var types = [];
                var warnings = document.getElementById('cppcheckDetails').childNodes[1].getElementsByTagName('tr');
                for (var i = 0; i < warnings.length; i++) {
                    var warningsElements = warnings[i].getElementsByTagName('td');
                    var type = warningsElements[mapping[name]].innerHTML;
                    if (!arrayContains(types, type)) {
                        types[types.length] = type;
                    }
                }
                types.sort();
                return types;
            }

            function getChosenWarningTypes(name) {
                var warningsTypes = [];
                var checkboxes = document.getElementsByName(name);
                for (var i = 0; i < checkboxes.length; i++) {
                    if (checkboxes[i].checked) {
                        warningsTypes[warningsTypes.length] = checkboxes[i].value;
                    }
                }
                return warningsTypes;
            }

            function isWarningVisible(states, warningDetails) {
                for (var i = 0; i < availableFilters.length; i++) {
                    var name = availableFilters[i];
                    var text = warningDetails[mapping[name]].innerHTML;
                    if(!arrayContains(states[i], text)) {
                        return false;
                    }
                }
                return true;
            }

            function filterByAllTypes() {
                var states = [ [] ];
                for (var i = 0; i < availableFilters.length; i++) {
                    var name = availableFilters[i];
                    states[i] = getChosenWarningTypes(name);
                }

                var warnings = document.getElementById('cppcheckDetails').childNodes[1].getElementsByTagName('tr');
                for (var i = 0; i < warnings.length; i++) {
                    var warningDetails = warnings[i].getElementsByTagName('td');
                    var isVisible = isWarningVisible(states, warningDetails);
                    for (var j = 0; j < warningDetails.length; j++) {
                        if (isVisible) {
                            warningDetails[j].style.display = 'table-cell';
                        } else {
                            warningDetails[j].style.display = 'none';
                        }
                    }
                }
            }

            function filterByType(name) {
                var states = getChosenWarningTypes(name);

                var warnings = document.getElementById('cppcheckDetails').childNodes[1].getElementsByTagName('tr');
                for (var i = 0; i < warnings.length; i++) {
                    var warningDetails = warnings[i].getElementsByTagName('td');
                    var isWarningVisible = arrayContains(states, warningDetails[mapping[name]].innerHTML);
                    for (var j = 0; j < warningDetails.length; j++) {
                        if (isWarningVisible) {
                            warningDetails[j].style.display = 'table-cell';
                        } else {
                            warningDetails[j].style.display = 'none';
                        }
                    }
                }
            }

            function invertAllOfType(name) {
                var checkboxes = document.getElementsByName(name);
                for (var i = 0; i < checkboxes.length; i++) {
                    checkboxes[i].checked = !checkboxes[i].checked;
                }
            }

            function invertAll(name) {
                for (var i = 0; i < availableFilters.length; i++) {
                    invertAllOfType(availableFilters[i]);
                }
            }

            function checkAllOfType(name, isChecked) {
                var checkboxes = document.getElementsByName(name);
                for (var i = 0; i < checkboxes.length; i++) {
                    checkboxes[i].checked = isChecked;
                }
            }

            function checkAll(isChecked) {
                for (var i = 0; i < availableFilters.length; i++) {
                    checkAllOfType(availableFilters[i], isChecked);
                }
            }

            function addAttribute(element, attributeName, attributeValue) {
                var attribute = document.createAttribute(attributeName);
                attribute.value = attributeValue;
                element.setAttributeNode(attribute);
            }

            function createElement(elementName, innerHTML) {
                var element = document.createElement(elementName);
                element.innerHTML = innerHTML;
                return element;
            }

            function getCheckboxesValues(name) {
                var checkboxes = document.getElementsByName(name);
                var checkboxesValues = [];
                for (var i = 0; i < checkboxes.length; i++) {
                    checkboxesValues[checkboxesValues.length] = checkboxes[i].value;
                }
                return checkboxesValues;
            }

            function updateCheckboxList(name) {
                var isCompleted = false;

                var bigDiv = createElement('div', '');

                var checkboxesValues = getCheckboxesValues(name);
                var typeForm = document.getElementById(name + 'Form');

                var types = getAll(name);
                var step = Math.floor(types.length / 4);
                for (var i = 0; i < types.length; i++) {
                    if (!arrayContains(checkboxesValues, types[i])) {
                        var div = createElement('div', '');

                        var checkbox = createElement('input', '');
                        addAttribute(checkbox, 'type', 'checkbox');
                        addAttribute(checkbox, 'name', name);
                        addAttribute(checkbox, 'value', types[i]);
                        div.appendChild(checkbox);

                        var span = createElement('span', types[i]);
                        div.appendChild(span);

                        bigDiv.appendChild(div);

                        if(step > 5 && (i % step) == (step - 1)) {
                            if (i + 1 == types.length) {
                                bigDiv.style.float = 'none';
                                isCompleted = true;
                            } else {
                                bigDiv.style.float = 'left';
                            }
                            typeForm.appendChild(bigDiv);
                            bigDiv = createElement('div', '');
                        }
                    }
                }

                if (!isCompleted) {
                    bigDiv.style.float = 'none';
                    typeForm.appendChild(bigDiv);
                }
            }

            function updateCheckboxLists() {
                for (var i = 0; i < availableFilters.length; i++) {
                    updateCheckboxList(availableFilters[i]);
                }
            }

            function createButton(title, command) {
                var button = createElement('button', title);
                addAttribute(button, 'type',    'button');
                addAttribute(button, 'onclick', command);
                return button;
            }

            function generateForm(name) {
                var form = createElement('form', '');
                addAttribute(form, 'action', '#');
                if(name === undefined) {
                    addAttribute(form, 'id', 'allForm');
                    form.appendChild(createButton('Check all',   "checkAll(true);"));
                    form.appendChild(createButton('Uncheck all', "checkAll(false);"));
                    form.appendChild(createButton('Invert',      "invertAll();"));
                    form.appendChild(createButton('Filter',      "filterByAllTypes();"));
                } else {
                    addAttribute(form, 'id', name + 'Form');
                    form.appendChild(createButton('Check all',         "checkAllOfType('" + name + "', true);"));
                    form.appendChild(createButton('Uncheck all',       "checkAllOfType('" + name + "', false);"));
                    form.appendChild(createButton('Invert',            "invertAllOfType('" + name + "');"));
                    form.appendChild(createButton('Filter by ' + name, "filterByType('" + name + "');"));
                }
                form.appendChild(createElement('br', ''));
                return form;
            }

            function changeStyle() {
                /*var css = '#cppcheckDetails { table-layout: fixed; } #cppcheckDetails .pane-header { word-wrap: break-word; }';
                var mainPanel = document.getElementById('main-panel');
                var style = document.createElement('style');

                style.type = 'text/css';
                if (style.styleSheet) {
                    style.styleSheet.cssText = css;
                } else {
                    style.appendChild(document.createTextNode(css));
                }

                mainPanel.appendChild(style);*/
            }

            function generateForms() {
                changeStyle();

                var listsToCreate = [
                    'state',
                    'severity',
                    'type',
                    'inconclusive'
                ];
                var divWithForms = document.getElementById('filters');
                for (var i = 0; i < listsToCreate.length; i++) {
                    var form = generateForm(listsToCreate[i]);
                    divWithForms.appendChild(form);
                    divWithForms.appendChild(createElement('br', ''));
                }
                divWithForms.appendChild(generateForm());
                divWithForms.appendChild(createElement('br', ''));
                divWithForms.appendChild(createElement('br', ''));

                var generator = divWithForms.childNodes[0];
                generator.style.display = 'none';
            }
        ]]>
    </script>

    <div id="filters">
        <button type="button" onclick="generateForms(); updateCheckboxLists();">Generate filters</button>
    </div>

    <table class="pane sortable" id="cppcheckDetails">
        <thead>
            <tr>
                <td class="pane-header" style="width:  5%;">${%State}</td>
                <td class="pane-header" style="width: 30%;">${%File}</td>
                <td class="pane-header" style="width:  5%;">${%Line}</td>
                <td class="pane-header" style="width:  7%;">${%Severity}</td>
                <td class="pane-header" style="width: 11%;">${%Type}</td>
                <td class="pane-header" style="width:  7%;">${%Inconclusive}</td>
                <td class="pane-header" style="width: 35%;">${%Message}</td>
            </tr>
        </thead>
        <tbody>
            <j:forEach var="elt" items="${cachedContainer}">
                <j:set var="cppcheckFile" value="${elt.cppcheckFile}"/>
                
                <j:set var="inconclusiveCss" value=""/>
                <j:if test="${cppcheckFile.inconclusive}">
                    <j:set var="inconclusiveCss" value="inconclusive"/>
                </j:if>

                <tr>
                    <td class="pane ${elt.diffState.css} ${inconclusiveCss}">${elt.diffState.text}</td>
                    <td class="pane ${elt.diffState.css} ${inconclusiveCss}">
                        <j:if test="${elt.isSourceIgnored()}">
                            ${cppcheckFile.fileName}
                        </j:if>
                        <j:if test="${not elt.isSourceIgnored()}">
                            <a href="source.${cppcheckFile.key}">${cppcheckFile.fileName}</a>
                        </j:if>
                    </td>
                    <td class="pane ${elt.diffState.css} ${inconclusiveCss}" data="${cppcheckFile.lineNumber}">
                        <j:if test="${elt.isSourceIgnored()}">
                            ${cppcheckFile.lineNumberString}
                        </j:if>
                        <j:if test="${not elt.isSourceIgnored()}">
                            <a href="source.${cppcheckFile.key}#${cppcheckFile.linkLineNumber}">${cppcheckFile.lineNumberString}</a>
                        </j:if>
                    </td>
                    <td class="pane ${elt.diffState.css} ${inconclusiveCss}">${cppcheckFile.severity}</td>
                    <td class="pane ${elt.diffState.css} ${inconclusiveCss}">${cppcheckFile.cppCheckId}</td>
                    <td class="pane ${elt.diffState.css} ${inconclusiveCss}">${cppcheckFile.inconclusive}</td>
                    <td class="pane ${elt.diffState.css} ${inconclusiveCss}">${cppcheckFile.messageHtml}</td>
                </tr>
            </j:forEach>
        </tbody>
    </table>
</j:jelly>
